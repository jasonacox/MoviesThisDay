"""
MoviesThisDay Correction Tool

This interactive script allows users to search for movies in the MoviesThisDay database and submit corrections or updates to movie fields.

Features:
- Search for movies by title or IMDB ID (case-insensitive, substring match)
- Select a movie from a sorted, colorized list
- Edit any field except 'id' and 'imdb_id', with clear prompts and color highlighting
- If the release_date year is changed, suggests updating release_year for consistency
- Appends corrections as JSON lines to updates.jsonl for later application to the database
- Cross-platform color support using colorama

Usage:
    python correction_tool.py

Requirements:
    - colorama (pip install colorama)
    - movies_by_day.pkl (generated by build_db.py)
    - updates.jsonl (created/updated by this tool)
"""
import pickle
import json
import os
from colorama import init, Fore, Style

init(autoreset=True)

PKL_PATH = os.path.join(os.path.dirname(__file__), 'movies_by_day.pkl')
CORRECTIONS_PATH = os.path.join(os.path.dirname(__file__), 'updates.jsonl')

def load_movies_by_day():
    """
    Load and flatten the movie index from the pickle file.
    Returns a list of all movie dicts.
    """
    with open(PKL_PATH, 'rb') as f:
        db = pickle.load(f)
    all_movies = []
    for movies in db['index'].values():
        all_movies.extend(movies)
    return all_movies

def search_movies(movies, query):
    """
    Search for movies by IMDB ID (exact/substring) or title (substring).
    Returns a list of matching movie dicts.
    """
    query = query.lower().strip()
    results = [m for m in movies if (m.get('imdb_id') and query in m['imdb_id'].lower()) or (m.get('title') and query in m['title'].lower())]
    return results

def pick_movie(results):
    """
    Display a sorted, colorized list of search results and prompt user to select one.
    Returns the selected movie dict, or None if quit.
    """
    if not results:
        print(f'\n{Fore.RED}No movies found.{Style.RESET_ALL}')
        return None
    results = sorted(results, key=lambda m: (m.get('title') or '').lower())
    print(f"\n{Fore.CYAN}Search Results:{Style.RESET_ALL}")
    print("="*60)
    for idx, m in enumerate(results):
        print(f"{Fore.YELLOW}[{idx+1}]{Style.RESET_ALL} {Style.BRIGHT}{m.get('title','?')}{Style.RESET_ALL} (IMDB: {Fore.GREEN}{m.get('imdb_id','?')}{Style.RESET_ALL}, Year: {m.get('release_year','?')})")
    print("="*60)
    while True:
        sel = input(f"Select movie [1-{len(results)}] or 'q' to quit (default quit): ").strip()
        if sel == '':
            return None  # default is quit
        if sel.lower() == 'q':
            return None
        if sel.isdigit() and 1 <= int(sel) <= len(results):
            return results[int(sel)-1]
        print(f'{Fore.RED}Invalid selection.{Style.RESET_ALL}')

def edit_movie_fields(movie):
    """
    Interactively prompt the user to edit fields of the selected movie.
    Excludes 'id' and 'imdb_id'.
    If release_date year changes, suggests updating release_year.
    Returns a dict of updated fields.
    """
    updated = {}
    orig_release_date = movie.get('release_date')
    while True:
        print(f"\n{Fore.CYAN}Current movie data:{Style.RESET_ALL}")
        print("-"*60)
        fields = [k for k in movie.keys() if k not in ('id', 'imdb_id')]
        for idx, k in enumerate(fields):
            print(f"  {Fore.YELLOW}[{idx+1}]{Style.RESET_ALL} {k}: {Fore.GREEN}{movie[k]}{Style.RESET_ALL}")
        print("-"*60)
        field_sel = input("Enter number of field to change (or 'q' to finish, default finish): ").strip()
        if field_sel == '' or field_sel.lower() == 'q':
            break  # default is finish
        if not field_sel.isdigit() or not (1 <= int(field_sel) <= len(fields)):
            print(f'{Fore.RED}Invalid selection. Try again.{Style.RESET_ALL}')
            continue
        field = fields[int(field_sel)-1]
        new_val = input(f"Enter new value for '{field}' (current: {movie[field]}, default keep): ").strip()
        if new_val == '':
            continue  # keep current value
        updated[field] = new_val
        movie[field] = new_val
        # If release_date is updated, suggest updating release_year if year changed
        if field == 'release_date':
            new_year = None
            old_year = None
            try:
                new_year = new_val.split('-')[0]
            except (AttributeError, IndexError):
                pass
            try:
                old_year = orig_release_date.split('-')[0] if orig_release_date else None
            except (AttributeError, IndexError):
                pass
            if new_year and new_year != old_year:
                print(f"{Fore.YELLOW}You changed the release_date year from {old_year} to {new_year}.{Style.RESET_ALL}")
                if 'release_year' in fields:
                    current_year = movie['release_year']
                    prompt = f"Update release_year to {new_year}? (current: {current_year}) [Y/n]: "
                    resp = input(prompt).strip().lower()
                    if resp in ('', 'y', 'yes'):
                        updated['release_year'] = new_year
                        movie['release_year'] = new_year
    return updated

def append_correction(imdb_id, updates, movie):
    """
    Append a correction/update for a movie to updates.jsonl.
    Includes imdb_id, updated fields, and optionally movie_title for context.
    """
    corr = {'imdb_id': imdb_id}
    corr.update(updates)
    if 'title' in movie:
        corr['movie_title'] = movie['title']
    with open(CORRECTIONS_PATH, 'a', encoding='utf-8') as f:
        f.write(json.dumps(corr, ensure_ascii=False) + '\n')
    print(f"Correction appended to {CORRECTIONS_PATH}.")

def main():
    """
    Main interactive loop for the correction tool.
    Allows searching, selecting, and updating movies, and appending corrections.
    """
    print(f"{Style.BRIGHT}{Fore.CYAN}MoviesThisDay Correction Tool{Style.RESET_ALL}\n" + "-"*60)
    movies = load_movies_by_day()
    while True:
        print(f"\n{Style.BRIGHT}Type a movie title or IMDB ID to search. Press Enter or 'q' to quit.{Style.RESET_ALL}")
        query = input(f"{Fore.CYAN}Search:{Style.RESET_ALL} ").strip()
        if query.lower() == 'q' or query == '':
            print(f"{Fore.GREEN}Exiting correction tool.{Style.RESET_ALL}")
            break
        results = search_movies(movies, query)
        movie = pick_movie(results)
        if not movie:
            continue
        updates = edit_movie_fields(dict(movie))
        if updates:
            append_correction(movie['imdb_id'], updates, movie)
        again = input("Add another correction? (y/N): ").strip().lower()
        if again != 'y':
            break
    print(f"{Fore.GREEN}Done.{Style.RESET_ALL}")

if __name__ == '__main__':
    main()
